==================
=                =
= Bash Scripting =
=                =
==================

1. What are pipes?
|

------------------

2. What are redirects?
> < etc

------------------

3. Explain STDOUT, STDIN, STDERR?

------------------

4. What are bash bultins?
Builtin commands right into bash.

------------------

5. What's the priority between commands and builtins?
Bash will run a builtin if it has one, even if the command with the same name is available.

------------------

6. What does the "help" command do?
Outputs the list of all available builtins.

------------------

7. What are bash expansions and substitutions?
~ - tilde expansion
{…} - brace expansion
Etc

------------------

8. What does the ~ expansion do?
It represents the user's $HOME environment variable.

------------------

9. What does the {…} brace expansion do?
Creates sets of ranges such as a, b, c. Or x..y..z (ranges of numbers).

Example: echo /tmp/{one,two,three}/file.txt
Lists files in three directories under tmp.

Example: echo {0..100}
Lists the numbers from 0 to 100.

------------------

10. What does ${…} parameter expansion do?
Retrieves and transforms stored values. Most often used for working with variables.

Pattern substitution: echo ${greeting/there/everybody}

------------------

11. What does $(…) command substitution do?
Puts the output of one command inside the other.

------------------

12. What does $((…)) arithmetic expansion do?
Math.

------------------

13. What is the difference between arithmetic expansion $((…)) and arithmetic evaluation ((…))?
Expansion returns the result of math operations, evaluation performs calculation and changes the value of variables. 

------------------

14. Can bash only do integer math?
Yes.

------------------

15. How to do more precise math?
You could use bc (basic calculator) or awk.

------------------

16. What kinds of mathematical operations does bash support?
(+) Addition
(-) Subtraction
(*) Multiplication
(/) Division
(%) Modulo
(**) Exponentiation

------------------

17. How to declare a variable that will always be a number?
declare -i b=3

------------------

18. How to get a random number in bash?
Use the $RANDOM variable.

------------------

19. What's an evaluation expansion [...]?
It's an alias for test (part of the GNU Core Utils), allows to evaluate expressions and return an exit status (0 true, 1 false).
Example: [ 4 -lt 5 ] (4 less than 5)

------------------

20. How can we read the value of an exit status?
Using the question mark variable ($?).

------------------

21. What is an extended test notation [[...]]?
Extended test supports comparisons that test runs and adds other features. Usually a better idea to use this over [...] for consistency. However, it's worth keeping in mind that the regular test expression is more widely compatible with other shells.
Example: [[ -d ~ && -a /bin/bash ]]

------------------

22. Will both commands be executed <command1> && ls?
Only if command1 returns a success (0) exit status. 

------------------

23. What does an -e flag do in the following statement: echo -e ...?
Interprets escaped characters like \t, \n, \a, and other control characters.

------------------

24. How would we alert a user to draw his attention (the bell character)?
By using the bell character: echo -e "\a" 

------------------

25. How to output text using placeholders and formatting?
Using printf "..." ... (similar to String.format() in Java)

------------------

26. Does bash support nested arrays?
No.

------------------

27. What types of arrays does bash support?
- Indexed
- Associative (maps)

------------------

28. How to use if statements in bash?
if (( condition )); then
	things to do
elif (( condition )); then
	things to do
else 
	things to do
fi

------------------

29. What kinds of loops are available in bash? How to create them?
While loops run while a condition is true.
while ...
do
	...
done

Until loops run until a condition is true.
until ...
do
	...
done

For loops iterate through a list of items, running code once for each of them.
for i in ...
do
	...
done

------------------

30. What if we declare a function after its call in a script? Will it work?
It will fail. We must declare function we use them.

------------------

31. What function variables are available?
- $@ represents the list of arguments given to a function
- $FUNCNAME represents the name of the function

------------------

32. How to write and read text files in bash?
Writing files is done via input redirection operators:
echo "abc" > out.txt overwrites the contexts of out.txt
echo "abc" >> out.txt appends to the end of out.txt

Script to read a file and output every line:
while read line; do echo $line; done < in.txt

------------------

33. What are script arguments?
Arguments allow us to pass information into a script from the command line.

They are assigned to $1, $2, etc. ($0 is the name of the script)

------------------

34. What are options in bash?
Options are a combination of a dash and a letter.
They allow us to pass information into a script from the command line.
They are accessed using the getops keyword.
They can accept arguments of their own.
Can be specified and used in any order.

------------------

35. What happens if we specify an option without the colon after it?
It would mean that it won't be expected to have a value, can be used for simple presence checks.

------------------

36. How to gather input interactively (as the script runs)?
Using the read keyword and storing input in variables.

------------------

37. What is the select keyword used for?
To provide a range of value for a user to choose from. It's important to use a break statement in such cases.
